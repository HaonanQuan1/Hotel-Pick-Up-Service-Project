/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Customer;


import Business.Customer.HotelOrder;
import Business.Customer.ItemOrder;
import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Hotel.Hotel;
import Business.Enterprise.Hotel.Room;
import Business.Enterprise.Item;
import Business.Enterprise.Model;
import Business.Enterprise.Model.EnterpriseType;
import Business.Network.Network;
import Business.UserAccount.CustomerAccount;
import Business.WorkQueue.OrderRequest;
import Business.WorkQueue.ReviewRequest;
import Business.WorkQueue.TransportRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author roc
 */
public class RoomDetailsJPanel extends javax.swing.JPanel {

    private EcoSystem system;
    private Hotel model;
    private CustomerAccount account;
    private Network net;
    private EnterpriseType type;

    /**
     * Creates new form HotelDetailsJPanel
     */
    public RoomDetailsJPanel(EcoSystem system, Hotel hotel, CustomerAccount account, Network net, EnterpriseType type) {
        initComponents();
        this.system = system;
        this.model = hotel;
        this.account = account;
        this.net = net;
        this.type = type;

//        if (!type.equals(EnterpriseType.Hotel)) {
//            this.jTabbedPane1.setTitleAt(1, "Product");
//        }

        showImage();
        populateTable();

//        if (model.getRate(net.getWorkqueue()) == -1) {
//            //rateLabel.setText("N/A");
//        } else {
//            //rateLabel.setText(model.getRate(net.getWorkqueue()) + "");
//        }
        //addressTextArea.setText(model.getAddress());
        //addressTextArea.setEnabled(false);
//        descriptionTextArea.setText(model.getDescription());
//        descriptionTextArea.setEnabled(false);
        //phoneLabel.setText(model.getPhonenumber());

        // Review tab
        populateReviewTable();
    }

    public void populateReviewTable() {
        DefaultTableModel dtm = (DefaultTableModel) reviewTable.getModel();
        dtm.setRowCount(0);
        for (WorkRequest wr : net.getWorkqueue().getWorkRequestList()) {
            if(wr instanceof TransportRequest)continue;
            if(wr.getEnterprise()!=model)continue;
            OrderRequest or = (OrderRequest) wr;
            if (or.isReviewed()) {
                Object row[] = new Object[4];
                row[0] = or.getReview();
                row[1] = or.getAccount().getUsername();
                row[2] = or.getReview().getRate();
                row[3] = or.getReview().getMessage();
                dtm.addRow(row);
            }

        }
    }

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) menuTable.getModel();
        dtm.setRowCount(0);
        //if (type.equals(EnterpriseType.Hotel)) {
            Hotel res = (Hotel) model;
//            if (res.getCategoryString() != null) {
//                categoryLabel.setText(res.getCategory().name());
//            }
            
            for (Room dash : res.getRoomList()) {
                Object row[] = new Object[2];
                row[0] = dash;
                row[1] = dash.getPrice();
                dtm.addRow(row);
            }
       // }
//        if (type.equals(EnterpriseType.Store)) {
//            Store store = (Store) model;
//            if (store.getCategory() != null) {
//                categoryLabel.setText(store.getCategory().name());
//            }
//            for (Product p : store.getGoods()) {
//                Object row[] = new Object[2];
//                row[0] = p;
//                row[1] = p.getPrice();
//                dtm.addRow(row);
//            }
//        }
    }

    private void showImage() {
        ImageIcon image = null;
        //if (type.equals(EnterpriseType.Hotel)) {
            Hotel res = (Hotel) model;
            image = new ImageIcon(res.getPhotopath());
        //}
//        if (type.equals(EnterpriseType.Store)) {
//            Store store = (Store) model;
//            image = new ImageIcon(store.getPath());
//        }
        image.setImage(image.getImage().getScaledInstance(250, 180, Image.SCALE_DEFAULT));
        //imageLabel.setIcon(image);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        reviewTable = new javax.swing.JTable();

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(menuTable);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );

        jTabbedPane1.addTab("Room", jPanel2);

        reviewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Date", "Customer", "Rate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reviewTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reviewTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(reviewTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(144, 144, 144))
        );

        jTabbedPane1.addTab("Reviews", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reviewTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reviewTableMouseClicked
        int index = reviewTable.getSelectedRow();

        if (index >= 0) {
            ReviewRequest rr = (ReviewRequest) reviewTable.getValueAt(index, 0);
        }
    }//GEN-LAST:event_reviewTableMouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        int selectedRow = menuTable.getSelectedRow();

        if (selectedRow >= 0) {
            Item item = (Item) menuTable.getValueAt(selectedRow, 0);
            int quantity = (int) quantitySpinner.getValue();

            this.type=type.Hotel;

            ItemOrder line = null;
            if (this.type.equals(EnterpriseType.Hotel)) {
                line = new HotelOrder(quantity,item ,this.model );
            }

            if (!this.account.getCart().isCartEmpty()) {
                for (ItemOrder or : this.account.getCart().getItemlist()) {
                    if (!or.getModel().equals(this.model)) {
                        int choice = JOptionPane.showConfirmDialog(null, " \n"
                            + "Adding this dash will remove all previous dashes in modelping cart.\n" + "Do you want to continue?",
                            "Hotel Conflicts", JOptionPane.YES_NO_OPTION);
                        if (choice == JOptionPane.YES_OPTION) {
                            this.account.getCart().clearCart();
                            break;
                        } else {
                            return;
                        }
                    }
                    if (or.getModel().equals(this.model) && or.getItem().equals(item)) {
                        line.setQuantatity(or.getQuantatity() + quantity);
                        this.account.getCart().getItemlist().remove(or);
                        break;
                    }
                }
            }
            this.account.getCart().addItem(line);

            JOptionPane.showMessageDialog(null, "Room has been successfully added to Shopping Cart");
            DB4OUtil.getInstance().storeSystem(system);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a room.");
        }
    }//GEN-LAST:event_addButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable menuTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTable reviewTable;
    // End of variables declaration//GEN-END:variables
}
